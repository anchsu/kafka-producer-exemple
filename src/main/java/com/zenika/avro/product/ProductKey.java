/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.zenika.avro.product;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ProductKey extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ProductKey\",\"namespace\":\"com.zenika.avro.product\",\"fields\":[{\"name\":\"productIdentifier\",\"type\":\"string\",\"doc\":\"The product identifier\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The product identifier */
  @Deprecated public java.lang.CharSequence productIdentifier;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public ProductKey() {}

  /**
   * All-args constructor.
   */
  public ProductKey(java.lang.CharSequence productIdentifier) {
    this.productIdentifier = productIdentifier;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return productIdentifier;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: productIdentifier = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'productIdentifier' field.
   * The product identifier   */
  public java.lang.CharSequence getProductIdentifier() {
    return productIdentifier;
  }

  /**
   * Sets the value of the 'productIdentifier' field.
   * The product identifier   * @param value the value to set.
   */
  public void setProductIdentifier(java.lang.CharSequence value) {
    this.productIdentifier = value;
  }

  /** Creates a new ProductKey RecordBuilder */
  public static com.zenika.avro.product.ProductKey.Builder newBuilder() {
    return new com.zenika.avro.product.ProductKey.Builder();
  }
  
  /** Creates a new ProductKey RecordBuilder by copying an existing Builder */
  public static com.zenika.avro.product.ProductKey.Builder newBuilder(com.zenika.avro.product.ProductKey.Builder other) {
    return new com.zenika.avro.product.ProductKey.Builder(other);
  }
  
  /** Creates a new ProductKey RecordBuilder by copying an existing ProductKey instance */
  public static com.zenika.avro.product.ProductKey.Builder newBuilder(com.zenika.avro.product.ProductKey other) {
    return new com.zenika.avro.product.ProductKey.Builder(other);
  }
  
  /**
   * RecordBuilder for ProductKey instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ProductKey>
    implements org.apache.avro.data.RecordBuilder<ProductKey> {

    private java.lang.CharSequence productIdentifier;

    /** Creates a new Builder */
    private Builder() {
      super(com.zenika.avro.product.ProductKey.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.zenika.avro.product.ProductKey.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.productIdentifier)) {
        this.productIdentifier = data().deepCopy(fields()[0].schema(), other.productIdentifier);
        fieldSetFlags()[0] = true;
      }
    }
    
    /** Creates a Builder by copying an existing ProductKey instance */
    private Builder(com.zenika.avro.product.ProductKey other) {
            super(com.zenika.avro.product.ProductKey.SCHEMA$);
      if (isValidValue(fields()[0], other.productIdentifier)) {
        this.productIdentifier = data().deepCopy(fields()[0].schema(), other.productIdentifier);
        fieldSetFlags()[0] = true;
      }
    }

    /** Gets the value of the 'productIdentifier' field */
    public java.lang.CharSequence getProductIdentifier() {
      return productIdentifier;
    }
    
    /** Sets the value of the 'productIdentifier' field */
    public com.zenika.avro.product.ProductKey.Builder setProductIdentifier(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.productIdentifier = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'productIdentifier' field has been set */
    public boolean hasProductIdentifier() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'productIdentifier' field */
    public com.zenika.avro.product.ProductKey.Builder clearProductIdentifier() {
      productIdentifier = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public ProductKey build() {
      try {
        ProductKey record = new ProductKey();
        record.productIdentifier = fieldSetFlags()[0] ? this.productIdentifier : (java.lang.CharSequence) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
